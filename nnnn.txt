const express = require('express');
const mysql = require('mysql');
const cors = require('cors');  // Importing the cors package
const app = express();
const port = 8080;



// Middleware
app.use(cors());  // Enabling CORS
app.use(express.json());
app.use(express.urlencoded({ extended: true }));



// Database connection
const db = mysql.createConnection({
   host: 'localhost',
   user: 'root',
   password: '',
   database: 'test',
});


db.connect((err) => {
  if (err) throw err;
  console.log('Database connected.');
});



// Get States
app.get('/getStates', (req, res) => {
  const sql = 'SELECT DISTINCT `State` FROM `autoapproval`';
  db.query(sql, (err, results) => {
      if (err) throw err;
      res.json(results.map(row => row.State));
  });
});

//Get Tier
app.get('/getTiers', (req, res) => {
  const sql = 'SELECT DISTINCT `Tier` FROM `autoapproval`';
  db.query(sql, (err, results) => {
      if (err) throw err;
      res.json(results.map(row => row.Tier));
  });
});





// Get all data (initial page load)
app.get('/autoapproval', (req, res) => {
  const sql = 'SELECT * FROM `autoapproval`'; // Adjust the SQL query if needed
  db.query(sql, (err, results) => {
      if (err) {
          console.error('Error fetching data:', err);
          res.status(500).json({ error: 'Internal Server Error' });
          return;
      }
      res.json(results);
  });
});



// Filter Data
app.post('/autoapproval', (req, res) => {
  const { State, FicoScore, Tier } = req.body;
  let sql = `
      SELECT First Name, Last Name, House, Street Name, Street Type, City, State, Zip Code, SSN, FICO  Score, Tier
      FROM \`autoapproval\`
      WHERE 1=1
  `;
  let queryParams = [ ];
  // Add conditions for FicoScore and Tier if provided
  if (State) {
    sql += ' AND State = ?';
    queryParams.push(State);
}
  if (FicoScore) {
      sql += ' AND `FICO  Score` = ?';
      queryParams.push(FicoScore);
  }
  if (Tier) {
      sql += ' AND Tier = ?';
      queryParams.push(Tier);
  }
  db.query(sql, queryParams, (err, results) => {


      if (err) throw err;
      res.json(results);
  });
});
app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});